* Samuel Evans-Powell Emacs Configuration
** General

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)    ; delete excess backup versions silently
(setq version-control t)         ; use version control
(setq vc-make-backup-files t)      ; Make backup files even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups"))) ; Which directory to put backup files in
(setq vc-follow-symlinks t)        ; Don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))) ; Transform backups file name
(setq inhibit-startup-screen t)    ; Suppress useless and old-school startup screen
(setq ring-bell-function 'ignore)  ; Silent bell when you make a mistake
(setq coding-system-for-read 'utf-8) ; Use UTF-8 by defaul
(setq coding-system-for-write 'utf-8)
(setq sentence-end-double-space nil)    ; Sentence should end with only a point.
(setq default-fill-column 80)           ; Toggle wrapping text at the 80th character
(setq initial-scratch-message "") ; Print a default message in the empty scratch buffer opened at startup

(setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up
;; the following lines tell emacs where on the internet to look up
;; for new packages.
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
       ("gnu"       . "http://elpa.gnu.org/packages/")
       ("melpa"     . "https://melpa.org/packages/")
       ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package) ; unless it is already installed
  (package-refresh-contents) ; updage packages archive
  (package-install 'use-package)) ; and install the most recent version of use-package

(require 'use-package) ; guess what this one does too ?

;; Taken from Spacemacs: func.el:249
(defun sep/counsel-up-directory-no-error ()
  "`counsel-up-directory' ignoring errors."
  (interactive)
  (ignore-errors
    (call-interactively 'counsel-up-directory)))

(use-package general :ensure t
  :config
  (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"
    "/"   'swiper
    "b"	  '(:ignore t :which-key "buffers")
    "bb"      'ivy-switch-buffer

    "f"   '(:ignore t :which-key "files")
    "ff"      'counsel-find-file
    "fr"      'counsel-recentf
    "fs"      'save-buffer
    "fe"  '(:ignore t :which-key "config")
    "fed"     '(lambda () (interactive) (switch-to-buffer (find-file-noselect "~/.emacs.d/configuration.org")))
    "fer"     '(lambda () (interactive) (org-babel-load-file "~/.emacs.d/configuration.org"))

    "h"  '(:ignore t :which-key "help")
    "hd"   '(:ignore t :which-key "describe")
    "hdv"    'counsel-describe-variable
    "hdf"    'counsel-describe-function
    "hdk"    'describe-key

    "t"  '(:ignore t :which-key "utility")
    "twm"   'whitespace-mode
    "twx"   'delete-trailing-whitespace

    "c"  '(:ignore t :which-key "comment")
    "cl"    'comment-line

    "w"  '(:ignore t :which-key "window")
    "wj"    'evil-window-down
    "wk"    'evil-window-up
    "wh"    'evil-window-left
    "wl"    'evil-window-right
    "w/"    'evil-window-vsplit
    "w-"    'evil-window-split
    "wd"    'evil-window-delete
    "wW"    'ace-select-window
    "wf"    '(:ignore t :which-key "frame")
    "wfn"     'make-frame

    "l"   '(:ignore t :which-key "fill")
    "lr"  'fill-region
    "p"   '(:ignore t :which-key "project")
    "pf"  '(counsel-git :which-key "find file in git dir")
    "SPC" 'counsel-M-x

    "q"   '(:ignore t :which-key "quit")
    "qq"    'save-buffers-kill-terminal

    "g"   '(:ignore t :which-key "magit")
    "gs"    'magit-status
    )
    (general-define-key
       :states '(visual)
       "s" 'evil-surround-region
    )
    (general-define-key
       :keymaps 'ivy-minibuffer-map
       "C-j" 'ivy-next-line
       "C-k" 'ivy-previous-line
       "C-l" 'ivy-alt-done
       "C-h" 'sep/counsel-up-directory-no-error
    )
    (general-define-key
       :keymaps 'haskell-mode-map
       :states '(normal visual emacs)
       :prefix ","
       "i"  'haskell-navigate-imports
       "I"  'haskell-navigate-imports-return
       "f"  '(:ignore t :which-key "format")
       "fi"   'haskell-mode-format-imports
       "fb"   'haskell-mode-stylish-buffer
       "fr"   'hindent-reformat-region
       "s"  '(:ignore t :which-key "interactive")
       "ss"   'haskell-interactive-switch
       "sb"   'haskell-process-load-or-reload
    )
    (general-define-key
       :keymaps 'haskell-interactive-mode-map
       :states '(normal visual insert emacs)
       :prefix ","
       "s"  '(:ignore t :which-key "interactive")
       "ss"   'haskell-interactive-switch-back
    )
    (general-define-key
       :keymaps 'haskell-interactive-mode-map
       :states '(normal visual insert emacs)
       "C-j" 'haskell-interactive-mode-history-next
       "C-k" 'haskell-interactive-mode-history-previous
    )
    (general-define-key
       :keymaps 'magit-mode-map
       "C-j" 'magit-next-line
       "C-k" 'magit-previous-line
       "C-l" 'magit-go-forward
       "C-h" 'magit-go-backward
    )
  )

(use-package ivy :ensure t)

(use-package avy :ensure t
  :commands (avy-goto-word-1))

(use-package swiper :ensure t)
(use-package counsel :ensure t)
(use-package which-key
  :init
    (setq which-key-allow-evil-operators t)
    (setq which-key-show-operator-state-maps t)
  :config
    (which-key-mode)
  :ensure t)
(use-package evil :ensure t)

(evil-mode t)
(which-key-mode t)
#+END_SRC

Activate org-mode src code highlighting:

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Enable evil-surround-mode:

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

Disable menu, scroll bar:
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
  (scroll-bar-mode -1))
#+END_SRC

No tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Get path from shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(exec-path-from-shell-initialize)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes :ensure t)
;;(use-package spacemacs-theme
;;  :defer t
;;  :init (load-theme 'spacemacs-light t))
(load-theme 'doom-city-lights t)
;;(load-theme 'birds-of-paradise-plus t)
(set-default-font "Fira Code 10")
(add-to-list 'default-frame-alist '(font . "Fira Code 10"))
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :ensure t)

(use-package hindent :ensure t)
(add-hook 'haskell-mode-hook #'hindent-mode)

(custom-set-variables '(haskell-tags-on-save t))

(custom-set-variables
  '(haskell-process-suggest-remove-import-lines t)
  '(haskell-process-auto-import-loaded-modules t)
  '(haskell-process-log t))

(custom-set-variables '(haskell-process-type 'cabal-repl))

(setq haskell-interactive-popup-errors nil)

;(use-package ghc :ensure t)
;(autoload 'ghc-init "ghc" nil t)
;(autoload 'ghc-debug "ghc" nil t)
;(add-hook 'haskell-mode-hook (lambda () (ghc-init)))

;(use-package company-ghc :ensure t)
;(add-hook 'haskell-mode-hook 'company-mode)
;(add-to-list 'company-backends 'company-ghc)
;(custom-set-variables '(company-ghc-show-info t))

;(use-package dante
;  :ensure t
;  :after haskell-mode
;  :commands 'dante-mode
;  :init
;  (add-hook 'haskell-mode-hook 'dante-mode)
;  (add-hook 'haskell-mode-hook 'flycheck-mode))
#+END_SRC
   
** Javascript
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC
   
** Org
#+BEGIN_SRC emacs-lisp
(setq org-html-head-include-default-style nil)

(setq org-publish-project-alist
    ;; org-notes - org files are transformed to html
    ;; org-static - static files are just copied
    ;; org - both
    (quote (("org-notes"
            :base-directory "~/Documents/code/web/sevanspowell/"
            :base-extension "org"
            :publishing-directory "~/Documents/code/web/sevanspowell/docs"
            :recursive t
            :publishing-function org-html-publish-to-html
            :headline-levels 4
            :auto-preamble t
            :section-numbers nil
            :exclude "org-templates\\|docs"
            )
            ("org-static"
            :base-directory "~/Documents/code/web/sevanspowell/"
            :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
            :publishing-directory "~/Documents/code/web/sevanspowell/docs"
            :recursive t
            :publishing-function org-publish-attachment
            :section-numbers nil
            ;; :auto-sitemap t                  ; Generate sitemap.org automagically...
            ;; :sitemap-filename "sitemap.org"  ; ... call it sitemap.org (it's the default)...
            ;; :sitemap-title "Sitemap"         ; ... with title 'Sitemap'.
            )
            ("org" :components ("org-notes" "org-static"))

            ("remote-org-notes"
            :base-directory "~/Documents/code/web/sevanspowell/"
            :base-extension "org"
            :publishing-directory "~/Documents/code/web/sevanspowell/docs"
            :recursive t
            :publishing-function org-html-publish-to-html
            :headline-levels 4
            :auto-preamble t
            :section-numbers nil
            :exclude "org-templates\\|docs"
            )
            ("remote-org-static"
            :base-directory "~/Documents/code/web/sevanspowell/"
            :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
            :publishing-directory "~/Documents/code/web/sevanspowell/docs"
            :recursive t
            :publishing-function org-publish-attachment
            :section-numbers nil
            ;; :auto-sitemap t                  ; Generate sitemap.org automagically...
            ;; :sitemap-filename "sitemap.org"  ; ... call it sitemap.org (it's the default)...
            ;; :sitemap-title "Sitemap"         ; ... with title 'Sitemap'.
            )
            ("remote-org" :components ("remote-org-notes" "remote-org-static"))
            )))

(setq org-html-postamble-format '("en" "<p class=\"author\">Author: %a (%e)</p>\n<p class=\"date\">Date: %d</p>\n<p class=\"creator\">%c</p>\n"))
#+END_SRC

htmlize library for syntax-highlighting on HTML export:

#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC
