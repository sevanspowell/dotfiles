* Emacs Configuration

** Package management
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Don't load any packages on startup
  (setq package-enable-at-startup nil)

  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  ;; Use 'quelpa' and 'quelpa-use-package'
  (if (require 'quelpa nil t)
    (with-temp-buffer
      (url-insert-file-contents "https://framagit.org/steckerhalter/quelpa/raw/master/bootstrap.el")
      (eval-buffer)))

  (quelpa '(quelpa-use-package :fetcher git :url "https://framagit.org/steckerhalter/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+END_SRC

** Custom
#+BEGIN_SRC emacs-lisp
;; Save custom variables to custom.el
(setq custom-file (expand-file-name "custom.el"
				    user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+END_SRC

** Helpers
#+BEGIN_SRC emacs-lisp
;; https://www.emacswiki.org/emacs/AnsiTermHints
(defun term/shell (program &optional new-buffer-name)
      "Start a terminal-emulator in a new buffer.

    With a prefix argument, it prompts the user for the shell
    executable.

    If there is already existing buffer with the same name, switch to
    that buffer, otherwise it creates new buffer.

    Like `shell', it loads `~/.emacs_SHELLNAME' if exists, or
    `~/.emacs.d/init_SHELLNAME.sh'.

    The shell file name (sans directories) is used to make a symbol
    name such as `explicit-bash-args'.  If that symbol is a variable,
    its value is used as a list of arguments when invoking the
    shell."
      (interactive (let ((default-prog (or explicit-shell-file-name
                                           (getenv "ESHELL")
                                           shell-file-name
                                           (getenv "SHELL")
                                           "/bin/sh")))
                     (list (if (or (null default-prog)
                                   current-prefix-arg)
                               (read-from-minibuffer "Run program: " default-prog)
                             default-prog))))

      ;; Pick the name of the new buffer.
      (setq term-ansi-buffer-name
            (if new-buffer-name
                new-buffer-name
              (if term-ansi-buffer-base-name
                  (if (eq term-ansi-buffer-base-name t)
                      (file-name-nondirectory program)
                    term-ansi-buffer-base-name)
                "shell/term")))

      (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

      ;; In order to have more than one term active at a time
      ;; I'd like to have the term names have the *term-ansi-term<?>* form,
      ;; for now they have the *term-ansi-term*<?> form but we'll see...
      (when current-prefix-arg
        (setq term-ansi-buffer-name
              (generate-new-buffer-name term-ansi-buffer-name)))

      (let* ((name (file-name-nondirectory program))
             (startfile (concat "~/.emacs_" name))
             (xargs-name (intern-soft (concat "explicit-" name "-args"))))
        (unless (file-exists-p startfile)
          (setq startfile (concat user-emacs-directory "init_" name ".sh")))

        (setq term-ansi-buffer-name
              (apply 'term-ansi-make-term term-ansi-buffer-name program
                     (if (file-exists-p startfile) startfile)
                     (if (and xargs-name (boundp xargs-name))
                         ;; `term' does need readline support.
                         (remove "--noediting" (symbol-value xargs-name))
                       '("-i")))))

      (set-buffer term-ansi-buffer-name)
      (term-mode)
      (term-line-mode)                      ; (term-char-mode) if you want

      (switch-to-buffer term-ansi-buffer-name))
(defun term/shell (program &optional new-buffer-name)
      "Start a terminal-emulator in a new buffer.

    With a prefix argument, it prompts the user for the shell
    executable.

    If there is already existing buffer with the same name, switch to
    that buffer, otherwise it creates new buffer.

    Like `shell', it loads `~/.emacs_SHELLNAME' if exists, or
    `~/.emacs.d/init_SHELLNAME.sh'.

    The shell file name (sans directories) is used to make a symbol
    name such as `explicit-bash-args'.  If that symbol is a variable,
    its value is used as a list of arguments when invoking the
    shell."
      (interactive (let ((default-prog (or explicit-shell-file-name
                                           (getenv "ESHELL")
                                           shell-file-name
                                           (getenv "SHELL")
                                           "/bin/sh")))
                     (list (if (or (null default-prog)
                                   current-prefix-arg)
                               (read-from-minibuffer "Run program: " default-prog)
                             default-prog))))

      ;; Pick the name of the new buffer.
      (setq term-ansi-buffer-name
            (if new-buffer-name
                new-buffer-name
              (if term-ansi-buffer-base-name
                  (if (eq term-ansi-buffer-base-name t)
                      (file-name-nondirectory program)
                    term-ansi-buffer-base-name)
                "shell/term")))

      (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

      ;; In order to have more than one term active at a time
      ;; I'd like to have the term names have the *term-ansi-term<?>* form,
      ;; for now they have the *term-ansi-term*<?> form but we'll see...
      (when current-prefix-arg
        (setq term-ansi-buffer-name
              (generate-new-buffer-name term-ansi-buffer-name)))

      (let* ((name (file-name-nondirectory program))
             (startfile (concat "~/.emacs_" name))
             (xargs-name (intern-soft (concat "explicit-" name "-args"))))
        (unless (file-exists-p startfile)
          (setq startfile (concat user-emacs-directory "init_" name ".sh")))

        (setq term-ansi-buffer-name
              (apply 'term-ansi-make-term term-ansi-buffer-name program
                     (if (file-exists-p startfile) startfile)
                     (if (and xargs-name (boundp xargs-name))
                         ;; `term' does need readline support.
                         (remove "--noediting" (symbol-value xargs-name))
                       '("-i")))))

      (set-buffer term-ansi-buffer-name)
      (term-mode)
      (term-line-mode)                      ; (term-char-mode) if you want

      (switch-to-buffer term-ansi-buffer-name))
(defun term/shell (program &optional new-buffer-name)
      "Start a terminal-emulator in a new buffer.

    With a prefix argument, it prompts the user for the shell
    executable.

    If there is already existing buffer with the same name, switch to
    that buffer, otherwise it creates new buffer.

    Like `shell', it loads `~/.emacs_SHELLNAME' if exists, or
    `~/.emacs.d/init_SHELLNAME.sh'.

    The shell file name (sans directories) is used to make a symbol
    name such as `explicit-bash-args'.  If that symbol is a variable,
    its value is used as a list of arguments when invoking the
    shell."
      (interactive (let ((default-prog (or explicit-shell-file-name
                                           (getenv "ESHELL")
                                           shell-file-name
                                           (getenv "SHELL")
                                           "/bin/sh")))
                     (list (if (or (null default-prog)
                                   current-prefix-arg)
                               (read-from-minibuffer "Run program: " default-prog)
                             default-prog))))

      ;; Pick the name of the new buffer.
      (setq term-ansi-buffer-name
            (if new-buffer-name
                new-buffer-name
              (if term-ansi-buffer-base-name
                  (if (eq term-ansi-buffer-base-name t)
                      (file-name-nondirectory program)
                    term-ansi-buffer-base-name)
                "shell/term")))

      (setq term-ansi-buffer-name (concat "*" term-ansi-buffer-name "*"))

      ;; In order to have more than one term active at a time
      ;; I'd like to have the term names have the *term-ansi-term<?>* form,
      ;; for now they have the *term-ansi-term*<?> form but we'll see...
      (when current-prefix-arg
        (setq term-ansi-buffer-name
              (generate-new-buffer-name term-ansi-buffer-name)))

      (let* ((name (file-name-nondirectory program))
             (startfile (concat "~/.emacs_" name))
             (xargs-name (intern-soft (concat "explicit-" name "-args"))))
        (unless (file-exists-p startfile)
          (setq startfile (concat user-emacs-directory "init_" name ".sh")))

        (setq term-ansi-buffer-name
              (apply 'term-ansi-make-term term-ansi-buffer-name program
                     (if (file-exists-p startfile) startfile)
                     (if (and xargs-name (boundp xargs-name))
                         ;; `term' does need readline support.
                         (remove "--noediting" (symbol-value xargs-name))
                       '("-i")))))

      (set-buffer term-ansi-buffer-name)
      (term-mode)
      (term-line-mode)                      ; (term-char-mode) if you want

      (switch-to-buffer term-ansi-buffer-name))
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'undo-tree-mode)
    (diminish 'which-key-mode)
    (diminish 'flycheck-mode)
  )

  (use-package avy     :ensure t
    :config
      (setq ivy-initial-inputs-alist nil)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq ivy-re-builders-alist
            '((t . ivy--regex-ignore-order)))
    )
  (use-package general :ensure t)
  (use-package swiper :ensure t)
  (use-package counsel :ensure t)
  (use-package which-key :ensure t
    :config
    (which-key-mode 1)
    )
  (use-package evil :ensure t
    :config
    (evil-mode 1)
    )
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )
  (use-package evil-nerd-commenter
    :ensure t
    )
  ; Overload shifts so that they don't lose the selection
  (general-define-key
    :states '(visual)
    ">" 'djoyner/evil-shift-right-visual
    "<" 'djoyner/evil-shift-left-visual
    )
  (defun djoyner/evil-shift-left-visual ()
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (defun djoyner/evil-shift-right-visual ()
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (use-package magit
    :ensure t
    )
  (use-package evil-magit
    :ensure t
  )
  (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-dispatch-always t)
    )
    )
  (use-package sudo-edit
    :ensure t
  )
  (use-package all-the-icons
    :ensure t
  )
  (use-package projectile
    :ensure t
    :defer t
    :diminish projectile-mode
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy)
    (defun projectile-run-ansi-term ()
      "Invoke `ansi-term' in the project's root.

    Switch to the project specific shell buffer if it already exists."
      (interactive)
      (projectile-with-default-dir (projectile-ensure-project (projectile-project-root))
        (term/shell "bash" (concat "ansi-term " (projectile-project-name))))
    )
  )
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (global-company-mode)
    (setq company-idle-delay 0.2)
    (setq company-selection-wrap-around t)
    )
  (use-package flycheck
   :ensure t
   :init (global-flycheck-mode)
  )
  (use-package lsp-mode
   :ensure t
  )
  (use-package company-lsp
   :ensure t
  )
  (use-package lsp-ui
   :ensure t
  )
  (general-define-key
    :states '(normal motion)
    :keymaps 'with-editor-mode-map
    :prefix ","
    "k" 'with-editor-cancel
    "," 'with-editor-finish
    )
  (general-define-key
    :keymaps 'company-active-map
    "tab" 'company-complete
    "C-j" 'company-select-next
    "C-k" 'company-select-previous
    )
  (general-define-key
    :states '(visual)
    "s" 'evil-surround-region
    "S" 'evil-substitute
    )
  (general-define-key
    :keymaps 'ivy-minibuffer-map
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line
    "C-l" 'ivy-alt-done
    "C-h" 'counsel-up-directory
    )
  (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"

    "ap"  'counsel-list-processes
    "j"  '(:ignore t :which-key "jump")
    "js" '(swiper-isearch :which-key "swiper")
    "jl" 'avy-goto-line
    "jk" 'avy-goto-char
    "bb" 'ivy-switch-buffer
    "bs" '((lambda () (interactive) (switch-to-buffer (get-buffer-create "*scratch*"))) :which-key "switch-to-scratch-buffer")
    "bm" '((lambda () (interactive) (switch-to-buffer (get-buffer-create "*Messages*"))) :which-key "switch-to-messages-buffer")
    "br" 'revert-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer
    "bd" 'evil-delete-buffer

    "c"  '(:ignore t :which-key "comment")
    "cl" 'evilnc-comment-or-uncomment-lines

    "SPC" 'counsel-M-x
    "qq"   'kill-emacs

    "f"   '(:ignore t :which-key "files")
    "fs"  'save-buffer
    "fed" '((lambda () (interactive) (find-file "~/.emacs.d/configuration.org")) :which-key "open-emacs-config")
    "fer" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "reload-emacs-config")
    "fen" '((lambda () (interactive) (find-file "/sudo:root@localhost:/etc/nixos/configuration.nix")) :which-key "open-nix-config")
    "fo"  '(:ignore t :which-key "organization")
    "foi" '((lambda () (interactive) (find-file "~/org/inbox.org")) :which-key "open-org-inbox")
    "fot" '((lambda () (interactive) (find-file "~/org/timesheets/tiny.org")) :which-key "open-org-timesheet")
    "ff"  'counsel-find-file
    "fr"  'counsel-recentf
    "fE"  'sudo-edit

    "pf"  'projectile-find-file
    "pR"  'projectile-replace
    "pp"  'projectile-switch-project
    "ps"  'counsel-git-grep
    "p'"  'projectile-run-ansi-term


    "h"   '(:ignore t :which-key "help")
    "hd"  '(:ignore t :which-key "describe")
    "hdv" '(counsel-describe-variable :which-key "describe-variable")
    "hdf" '(counsel-describe-function :which-key "describe-function")
    "hdF" '(counsel-describe-face     :which-key "describe-face")
    "hdk" 'describe-key

    "t" '(:ignore t :which-key "utility")
    "tw" '(:ignore t :which-key "whitespace")
    "twm" 'whitespace-mode
    "twx" 'delete-trailing-whitespace
    "tf" '(:ignore t :which-key "fill")
    "tfm" 'auto-fill-mode
    "tfr" 'fill-region
    "ta"  'align-regexp
    "tl"  'toggle-truncate-lines

    "tt" '(:ignore t :which-key "theme")
    "ttl" 'counsel-load-theme

    "i"  '(:ignore t :which-key "insert")
    "iu" 'counsel-unicode-char

    "w" '(:ignore t :which-key "window")
    "wd" 'evil-window-delete
    "w-" 'evil-window-split
    "w/" 'evil-window-vsplit
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wh" 'evil-window-left
    "wH" 'evil-window-move-far-left
    "wl" 'evil-window-right
    "wL" 'evil-window-move-far-right
    "ww" 'ace-window

    "ut" 'undo-tree-visualize

    "xtc" 'transpose-chars

    "g" '(:ignore t :which-key "git")
    "gs" 'magit

    "ol" 'sort-lines

    "'" '((lambda () (interactive) (ansi-term "bash")) :which-key "terminal")
  )
#+END_SRC

** General

Disable menu, scroll bar:
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (fringe-mode '(0 . 0))
  (setq scroll-conservatively 100)
  (column-number-mode)
#+END_SRC

*** Backups
#+BEGIN_SRC emacs-lisp
  ; Use version control
  (setq version-control t)
  ; Make backups even when in ver-controlled dir
  (setq vc-make-backup-files t)
  ; Which directory to put backup files in
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) )
  ; Delete excess backup versions silently.
  (setq delete-old-versions -1)
#+END_SRC

*** Other
#+BEGIN_SRC emacs-lisp
 ; Don't ask for confirmation to followsymlinks
 (setq vc-follow-symlinks t )
 ; Transform backups file name
 (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) )
 ; Inhibit useless and old-school startup screen
 (setq inhibit-startup-screen t )
 ; Silent bell when you make a mistake
 (setq ring-bell-function 'ignore )
 ; Use utf-8 by default
 (setq coding-system-for-read 'utf-8 )
 (setq coding-system-for-write 'utf-8 )
 ; Sentence SHOULD end with only a point.
 (setq sentence-end-double-space nil)
 ; Toggle wrapping text at the 80th character
 (setq default-fill-column 80)
 (defalias 'yes-or-no-p 'y-or-n-p)
 (setq initial-scratch-message nil)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :ensure t)
  (use-package nimbus-theme :ensure t)
  (use-package base16-theme :ensure t)
  (load-theme 'nimbus t)
  (when window-system (global-hl-line-mode t))
#+END_SRC

** Org mode

Activate org-mode src code highlighting:

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Capture templates for: TODO tasks, Notes, appointments, phone calls,
meetings, and org-protocol.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    (quote (("t" "Todo" entry (file org-inbox-file)
    "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
    ("n" "Note" entry (file org-inbox-file)
    "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
    ("m" "Meeting" entry (file org-inbox-file)
    "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
    ("p" "Phone call" entry (file org-inbox-file)
    "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
    ("h" "Habit" entry (file org-inbox-file)
    "* TODO %?\n%U\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
    ))
    )
  (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
    ("STYLE_ALL" . "habit")))
    )

  (setq org-enforce-todo-dependencies t)

  (setq org-todo-keywords
    (quote ((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d)")
    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+END_SRC

Clocking
#+BEGIN_SRC emacs-lisp
  (setq org-columns-default-format "%40ITEM(Task) %17Effort(Effort){:} %10CLOCKSUM")
  (setq org-duration-format (quote h:mm))
  (setq org-tags-column -77)
  (setq org-clock-out-remove-zero-time-clocks t)

  (general-define-key
    :prefix  ","
    :states  'normal
    :keymaps 'org-mode-map
    "C"  '(:ignore t :which-key "clock")
    "Ci" 'org-clock-in
    "Co" 'org-clock-out
    ";"  'org-columns
    "tE" 'org-toggle-pretty-entities
    "tn" 'org-table-create
    )
#+END_SRC

** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode :ensure t)
(use-package nix-sandbox :ensure t)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package lsp-haskell :ensure t)
  (use-package haskell-mode
    :quelpa (haskell-mode :fetcher github :repo "sevanspowell/haskell-mode" :branch "pr-hoogle-process-wrapper")
    :defer t
    :init
    ;; (require 'lsp-ui)
    ;; (require 'lsp-haskell)
    ;; (add-hook 'haskell-mode-hook #'lsp)
    (setq default-nix-wrapper
      (lambda (args)
	(append
	  (append (list "nix-shell" "-I" "ssh-config-file=/home/sam/.ssh/nixbuild.config" "--command" )
		     (list (mapconcat 'identity args " "))
	    )
	    (list (nix-current-sandbox))
	  )
	)
      )
    (setq haskell-process-type 'cabal-new-repl)
    ;; Haskell repl session that runs in the background
    (setq haskell-process-wrapper-function default-nix-wrapper)
    ;; Haskell-ide-engine process
    (setq lsp-haskell-process-wrapper-function default-nix-wrapper)
    (setq haskell-hoogle-server-command (lambda (port) (apply haskell-process-wrapper-function (list (list "hoogle" "server" "--local" "-p" (number-to-string port))))))
    (setq haskell-completing-read-function 'completing-read)
    (setq haskell-process-suggest-hoogle-imports t)
    (setq haskell-process-suggest-add-package t)
    (setq haskell-process-log t)

    ;; Load lsp-haskell when we activate haskell mode in a buffer
    ;; (add-hook 'haskell-mode-hook #'lsp-haskell-enable)
    ;; Keep our haskell tags up to date (used for jumping to defn. etc.)
    (custom-set-variables '(haskell-tags-on-save t))
   )
    (general-define-key
      :states '(normal motion)
      :keymaps 'haskell-mode-map
      :prefix ","
      "ss" 'haskell-interactive-switch
      "sb" 'haskell-process-load-file
      "gi" 'haskell-navigate-imports
      "gg" 'haskell-mode-tag-find
      "gc" 'haskell-cabal-visit-file
      "ds" 'haskell-mode-toggle-scc-at-point
      "hi" 'haskell-process-do-info
      "ht" 'haskell-process-do-type
      "hh" 'haskell-hoogle-lookup-from-local
      "hs" 'haskell-menu
      )
    (general-define-key
      :states '(normal motion)
      :keymaps 'haskell-interactive-mode-map
      :prefix ","
      "ss" 'haskell-interactive-switch-back
      "pr" 'haskell-process-restart
      "pt" 'haskell-session-change-target
      )
    (setq tags-revert-without-query 1)
#+END_SRC

** Elisp
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :states '(normal motion)
    :keymaps 'emacs-lisp-mode-map
    :prefix ","
    "gg" 'xref-find-definitions
    "gG" 'xref-find-references
    "df" '(lambda () (interactive) (eval-defun 'edebugit))
    "dF" '(lambda () (interactive) (eval-defun nil))
    )
#+END_SRC

** Terminal
#+BEGIN_SRC emacs-lisp
(setq ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
#+END_SRC

** Contact

mail@sevanspowell.net
