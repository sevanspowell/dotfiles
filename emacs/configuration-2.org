* Emacs Configuration

** Package management
#+BEGIN_SRC emacs-lisp
(require 'package)

;; Don't load any packages on startup
(setq package-enable-at-startup nil)

(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)

;; If 'use-package' isn't installed...
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
  (use-package avy     :ensure t
    :config
      (setq ivy-initial-inputs-alist nil)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq ivy-re-builders-alist
            '((t . ivy--regex-ignore-order)))
    )
  (use-package general :ensure t)
  (use-package swiper :ensure t)
  (use-package counsel :ensure t)
  (use-package which-key :ensure t
    :config
    (which-key-mode 1)
    )
  (use-package evil :ensure t
    :config
    (evil-mode 1)
    )
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )
  (use-package magit
    :ensure t
    )
  (use-package evil-magit
    :ensure t
  )
  (use-package sudo-edit
    :ensure t
  )
  (use-package all-the-icons
    :ensure t
  )
  (use-package projectile
    :ensure t
    :defer t
    :diminish projectile-mode
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy)
    )
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (global-company-mode)
    (setq company-idle-delay 0.2)
    (setq company-selection-wrap-around t)
    )
  (use-package flycheck
   :ensure t
   :init (global-flycheck-mode)
  )
  (use-package lsp-mode
   :ensure t
  )
  (use-package company-lsp
   :ensure t
  )
  (use-package lsp-ui
   :ensure t
  )
  (general-define-key
    :states '(normal motion)
    :keymaps 'with-editor-mode-map
    :prefix ","
    "k" 'with-editor-cancel
    "c" 'with-editor-finish
    )
  (general-define-key
    :keymaps 'company-active-map
    "tab" 'company-complete
    "C-j" 'company-select-next
    "C-k" 'company-select-previous
    )
  (general-define-key
    :states '(visual)
    "s" 'evil-surround-region
    "S" 'evil-substitute
    )
  (general-define-key
    :keymaps 'ivy-minibuffer-map
    "C-j" 'ivy-next-line
    "C-k" 'ivy-previous-line
    "C-l" 'ivy-alt-done
    "C-h" 'counsel-up-directory
    )
  (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"

    "j"  '(:ignore t :which-key "jump")
    "js" '(counsel-grep-or-swiper :which-key "swiper")
    "jl" 'avy-goto-line
    "jk" 'avy-goto-char
    "bb" 'ivy-switch-buffer
    "bn" 'next-buffer
    "bp" 'previous-buffer

    "c"  '(:ignore t :which-key "comment")
    "cl" 'comment-line

    "SPC" 'counsel-M-x
    "qq"   'kill-emacs

    "f"   '(:ignore t :which-key "files")
    "fs"  'save-buffer
    "fed" '(lambda () (interactive) (find-file "~/.emacs.d/configuration.org"))
    "fer" '(lambda () (interactive) (load-file "~/.emacs.d/init.el"))
    "fen" '(lambda () (interactive) (find-file "/sudo:root@localhost:/etc/nixos/configuration.nix"))
    "ff"  'counsel-find-file
    "fr"  'counsel-recentf
    "fE"  'sudo-edit

    "pf"  'projectile-find-file
    "pR"  'projectile-replace
    "pp"  'projectile-switch-project

    "h"   '(:ignore t :which-key "help")
    "hd"  '(:ignore t :which-key "describe")
    "hdv" '(counsel-describe-variable :which-key "describe-variable")
    "hdf" '(counsel-describe-function :which-key "describe-function")
    "hdk" 'describe-key

    "t" '(:ignore t :which-key "utility")
    "tw" '(:ignore t :which-key "whitespace")
    "twm" 'whitespace-mode
    "twx" 'delete-trailing-whitespace
    "tf" '(:ignore t :which-key "fill")
    "tfm" 'auto-fill-mode
    "tfr" 'fill-region

    "tt" '(:ignore t :which-key "theme")
    "ttl" 'counsel-load-theme

    "i"  '(:ignore t :which-key "insert")
    "iu" 'counsel-unicode-char

    "w" '(:ignore t :which-key "window")
    "wd" 'evil-window-delete
    "w-" 'evil-window-split
    "w/" 'evil-window-vsplit
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wh" 'evil-window-left
    "wl" 'evil-window-right

    "g" '(:ignore t :which-key "git")
    "gs" 'magit
  )
#+END_SRC

** General

Disable menu, scroll bar:
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (fringe-mode '(0 . 0))
#+END_SRC

*** Backups
#+BEGIN_SRC emacs-lisp
  ; Use version control
  (setq version-control t)
  ; Make backups even when in ver-controlled dir
  (setq vc-make-backup-files t)
  ; Which directory to put backup files in
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) )
  ; Delete excess backup versions silently.
  (setq delete-old-versions -1)
#+END_SRC

*** Other
#+BEGIN_SRC emacs-lisp
 ; Don't ask for confirmation to followsymlinks
 (setq vc-follow-symlinks t )
 ; Transform backups file name
 (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) )
 ; Inhibit useless and old-school startup screen
 (setq inhibit-startup-screen t )
 ; Silent bell when you make a mistake
 (setq ring-bell-function 'ignore )
 ; Use utf-8 by default
 (setq coding-system-for-read 'utf-8 )
 (setq coding-system-for-write 'utf-8 )
 ; Sentence SHOULD end with only a point.
 (setq sentence-end-double-space nil)
 ; Toggle wrapping text at the 80th character
 (setq default-fill-column 80)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono-11")
  (use-package doom-themes :ensure t)
  (load-theme 'doom-city-lights t)
#+END_SRC

** Org mode

Activate org-mode src code highlighting:

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Capture templates for: TODO tasks, Notes, appointments, phone calls,
meetings, and org-protocol.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    (quote (("t" "Todo" entry (file org-inbox-file)
    "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
    ("n" "Note" entry (file org-inbox-file)
    "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
    ("m" "Meeting" entry (file org-inbox-file)
    "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
    ("p" "Phone call" entry (file org-inbox-file)
    "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
    ("h" "Habit" entry (file org-inbox-file)
    "* TODO %?\n%U\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
    ))
    )
  (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
    ("STYLE_ALL" . "habit")))
    )

  (setq org-enforce-todo-dependencies t)

  (setq org-todo-keywords
    (quote ((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d)")
    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+END_SRC

Clocking
#+BEGIN_SRC emacs-lisp
  (setq org-columns-default-format "%40ITEM(Task) %17Effort(Effort){:} %10CLOCKSUM")
  (setq org-tags-column -77)
  (setq org-clock-out-remove-zero-time-clocks t)

  (general-define-key
    :prefix  ","
    :states  'normal
    :keymaps 'org-mode-map
    "C"  '(:ignore t :which-key "clock")
    "Ci" 'org-clock-in
    "Co" 'org-clock-out
    ";"  'org-columns
    "tE" 'org-toggle-pretty-entities
    "tn" 'org-table-create
    )
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package lsp-haskell :ensure t)
(use-package haskell-mode
  :defer t
  :init
  (require 'lsp-ui)
  (require 'lsp-haskell)
  (add-hook 'haskell-mode-hook #'lsp)
  (setq default-nix-wrapper
    (lambda (args)
      (append
        ;; Change this to match your home directory/preferences
        (append (list "nix-shell" "-I" "ssh-config-file=/home/sam/.ssh/nixbuild.config" "--command" )
                   (list (mapconcat 'identity args " "))
          )
          (list (nix-current-sandbox))
        )
      )
    )
  (setq haskell-nix-wrapper
        (lambda (args)
          (apply default-nix-wrapper (list (append args (list "--ghc-option" "-Wwarn"))))
          )
        )
  (setq haskell-process-type 'cabal-new-repl)
  ;; Haskell repl session that runs in the background
  (setq haskell-process-wrapper-function haskell-nix-wrapper)
  ;; Haskell-ide-engine process
  (setq lsp-haskell-process-wrapper-function default-nix-wrapper)
  (setq haskell-completing-read-function 'completing-read)

  ;; Load lsp-haskell when we activate haskell mode in a buffer
  (add-hook 'haskell-mode-hook #'lsp-haskell-enable)
  ;; Keep our haskell tags up to date (used for jumping to defn. etc.)
  (custom-set-variables '(haskell-tags-on-save t))
  )
#+END_SRC

** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode :ensure t)
(use-package nix-sandbox :ensure t)
#+END_SRC

** Contact

mail@sevanspowell.net
